"""Test utility functions in the renderer file."""

from functools import partial

import jax
import jax.numpy as jnp
import mujoco
from assets.worlds import WORLD_42_CONVEX

import icland
import icland.renderer.sdfs as Sdf
from icland.renderer.renderer import (
    _scene_sdf_from_tilemap,
    can_see_object,
    generate_colormap,
    get_agent_camera_from_mjx,
    render_frame,
    render_frame_with_objects,
)
from icland.types import ICLandParams

TEST_TILEMAP_FLAT = jnp.array([[[0, 0, 0, 3] for _ in range(10)] for _ in range(10)])
TEST_TILEMAP_BUMP = TEST_TILEMAP_FLAT.at[:, 5].set(jnp.array([0, 0, 0, 5]))
TEST_FRAME = jnp.array(
    [
        [
            [0.701171875, 0.701171875, 0.701171875],
            [0.63037109375, 0.63037109375, 0.63037109375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.26025390625, 0.360107421875, 0.47216796875],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.260009765625, 0.360107421875, 0.47216796875],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.61474609375, 0.61474609375, 0.61474609375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.268798828125, 0.372314453125, 0.488037109375],
            [0.265625, 0.367919921875, 0.482177734375],
            [0.2626953125, 0.36376953125, 0.47705078125],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.2587890625, 0.3583984375, 0.4697265625],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5927734375, 0.5927734375, 0.5927734375],
            [0.70068359375, 0.70068359375, 0.70068359375],
            [0.703125, 0.703125, 0.703125],
            [0.58642578125, 0.58642578125, 0.58642578125],
        ],
        [
            [0.260009765625, 0.360107421875, 0.47216796875],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.259765625, 0.359619140625, 0.4716796875],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.260009765625, 0.35986328125, 0.471923828125],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.26025390625, 0.360107421875, 0.47216796875],
            [0.26025390625, 0.3603515625, 0.472412109375],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.62158203125, 0.62158203125, 0.62158203125],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.69677734375, 0.69677734375, 0.69677734375],
            [0.5859375, 0.5859375, 0.5859375],
        ],
        [
            [0.317138671875, 0.317138671875, 0.317138671875],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.317138671875, 0.317138671875, 0.317138671875],
            [0.319580078125, 0.319580078125, 0.319580078125],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.317138671875, 0.317138671875, 0.317138671875],
            [0.66748046875, 0.66748046875, 0.66748046875],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.70703125, 0.70703125, 0.70703125],
            [0.587890625, 0.587890625, 0.587890625],
            [0.705078125, 0.705078125, 0.705078125],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
        ],
        [
            [0.6689453125, 0.6689453125, 0.6689453125],
            [0.6650390625, 0.6650390625, 0.6650390625],
            [0.65478515625, 0.65478515625, 0.65478515625],
            [0.6494140625, 0.6494140625, 0.6494140625],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
        ],
        [
            [0.7724609375, 0.7724609375, 0.7724609375],
            [0.6640625, 0.6640625, 0.6640625],
            [0.7314453125, 0.7314453125, 0.7314453125],
            [0.70849609375, 0.70849609375, 0.70849609375],
            [0.58837890625, 0.58837890625, 0.58837890625],
            [0.703125, 0.703125, 0.703125],
            [0.587890625, 0.587890625, 0.587890625],
            [0.587890625, 0.587890625, 0.587890625],
            [0.703125, 0.703125, 0.703125],
            [0.587890625, 0.587890625, 0.587890625],
        ],
        [
            [0.8427734375, 0.8427734375, 0.8427734375],
            [0.740234375, 0.740234375, 0.740234375],
            [0.76953125, 0.76953125, 0.76953125],
            [0.7080078125, 0.7080078125, 0.7080078125],
            [0.587890625, 0.587890625, 0.587890625],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.60107421875, 0.60107421875, 0.60107421875],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.58642578125, 0.58642578125, 0.58642578125],
        ],
    ]
)
TEST_FRAME_WITH_PROPS = jnp.array(
    [
        [
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.68994140625, 0.68994140625, 0.68994140625],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.48095703125, 0.350830078125, 0.0],
            [0.35107421875, 0.48095703125, 0.35107421875],
            [0.48095703125, 0.35107421875, 0.0],
            [0.35107421875, 0.48095703125, 0.35107421875],
            [0.421875, 0.350830078125, 0.421875],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.61474609375, 0.61474609375, 0.61474609375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.4970703125, 0.36279296875, 6.258487701416016e-06],
            [0.4912109375, 0.3583984375, 1.430511474609375e-06],
            [0.35791015625, 0.490478515625, 0.35791015625],
            [0.422119140625, 0.35107421875, 0.422119140625],
            [0.34912109375, 0.478515625, 0.34912109375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5927734375, 0.5927734375, 0.5927734375],
            [0.70068359375, 0.70068359375, 0.70068359375],
            [0.703125, 0.703125, 0.703125],
            [0.58642578125, 0.58642578125, 0.58642578125],
        ],
        [
            [0.350830078125, 0.480712890625, 0.350830078125],
            [0.422119140625, 0.35107421875, 0.422119140625],
            [0.35107421875, 0.48095703125, 0.35107421875],
            [0.0, 0.0, 0.350341796875],
            [0.48095703125, 0.35107421875, 0.0],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.35107421875, 0.48095703125, 0.35107421875],
            [0.48046875, 0.3505859375, 0.0],
            [0.35107421875, 0.48095703125, 0.35107421875],
            [0.0, 0.0, 0.35107421875],
            [0.48095703125, 0.35107421875, 0.0],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.62158203125, 0.62158203125, 0.62158203125],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.69677734375, 0.69677734375, 0.69677734375],
            [0.5859375, 0.5859375, 0.5859375],
        ],
        [
            [0.317138671875, 0.317138671875, 0.317138671875],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.317138671875, 0.317138671875, 0.317138671875],
            [0.319580078125, 0.319580078125, 0.319580078125],
            [0.38134765625, 0.38134765625, 0.38134765625],
            [0.317138671875, 0.317138671875, 0.317138671875],
            [0.66748046875, 0.66748046875, 0.66748046875],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
        ],
        [
            [0.70703125, 0.70703125, 0.70703125],
            [0.587890625, 0.587890625, 0.587890625],
            [0.705078125, 0.705078125, 0.705078125],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.5859375, 0.5859375, 0.5859375],
        ],
        [
            [0.6689453125, 0.6689453125, 0.6689453125],
            [0.6650390625, 0.6650390625, 0.6650390625],
            [0.65478515625, 0.65478515625, 0.65478515625],
            [0.6494140625, 0.6494140625, 0.6494140625],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
            [0.6484375, 0.6484375, 0.6484375],
        ],
        [
            [0.7724609375, 0.7724609375, 0.7724609375],
            [0.6640625, 0.6640625, 0.6640625],
            [0.7314453125, 0.7314453125, 0.7314453125],
            [0.70849609375, 0.70849609375, 0.70849609375],
            [0.58837890625, 0.58837890625, 0.58837890625],
            [0.703125, 0.703125, 0.703125],
            [0.587890625, 0.587890625, 0.587890625],
            [0.587890625, 0.587890625, 0.587890625],
            [0.703125, 0.703125, 0.703125],
            [0.587890625, 0.587890625, 0.587890625],
        ],
        [
            [0.8427734375, 0.8427734375, 0.8427734375],
            [0.740234375, 0.740234375, 0.740234375],
            [0.76953125, 0.76953125, 0.76953125],
            [0.7080078125, 0.7080078125, 0.7080078125],
            [0.587890625, 0.587890625, 0.587890625],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.60107421875, 0.60107421875, 0.60107421875],
            [0.5859375, 0.5859375, 0.5859375],
            [0.70458984375, 0.70458984375, 0.70458984375],
            [0.58642578125, 0.58642578125, 0.58642578125],
        ],
    ]
)


def test_can_see_object_free() -> None:
    """Test if the can_see_object func returns true in unoccluded case."""
    # Player                       Sphere
    #  [] ----------------------->   ()
    # ===================================
    player_pos = jnp.array([0.5, 3.4, 0])
    player_dir = jnp.array([0, 0, 1])

    prop_pos = jnp.array([0.5, 3.5, 10])
    prop_sdf = partial(Sdf.sphere_sdf, r=0.5)

    terrain_sdf = lambda x: _scene_sdf_from_tilemap(TEST_TILEMAP_FLAT, x)[0]
    assert can_see_object(
        player_pos=player_pos,
        player_dir=player_dir,
        obj_pos=prop_pos,
        obj_sdf=prop_sdf,
        terrain_sdf=terrain_sdf,
    )


def test_can_see_object_occluded() -> None:
    """Test if the can_see_object func returns false in occluded case."""
    # Player                       Sphere
    #  [] ---------> ||              ()
    # ===============||==================
    player_pos = jnp.array([0.5, 3.4, 0])
    player_dir = jnp.array([0, 0, 1])

    prop_pos = jnp.array([0.5, 3.5, 10])
    prop_sdf = partial(Sdf.sphere_sdf, r=0.5)

    terrain_sdf = lambda x: _scene_sdf_from_tilemap(TEST_TILEMAP_BUMP, x)[0]
    assert not can_see_object(
        player_pos=player_pos,
        player_dir=player_dir,
        obj_pos=prop_pos,
        obj_sdf=prop_sdf,
        terrain_sdf=terrain_sdf,
    )


def test_get_agent_camera_from_mjx() -> None:
    """Test if the get_agent_camera_from_mjx transforms the positions."""
    icland_params = ICLandParams(
        mujoco.MjModel.from_xml_string(WORLD_42_CONVEX), None, 1
    )
    icland_state = icland.init(jax.random.PRNGKey(0), icland_params)
    world_width = 10

    agent_pos = icland_state.pipeline_state.mjx_data.xpos[
        icland_state.pipeline_state.component_ids[0, 0]
    ][:3]
    print(agent_pos)
    height_offset = 0.2
    camera_offset = 0.06
    cam_pos, cam_dir = get_agent_camera_from_mjx(
        icland_state,
        world_width,
        0,
        camera_height=height_offset,
        camera_offset=camera_offset,
    )
    assert jnp.allclose(
        cam_pos,
        jnp.array(
            [
                -agent_pos[0] + world_width - camera_offset,
                agent_pos[2] + height_offset,
                agent_pos[1],
            ]
        ),
    )
    assert jnp.allclose(cam_dir, jnp.array([-1, 0, 0]))


def test_render_frame() -> None:
    """Tests if the renderer can correctly render one frame."""
    frame = render_frame(
        jnp.array([0, 5.0, -10]),
        jnp.array([0, -0.5, 1.0]),
        TEST_TILEMAP_BUMP,
        view_width=10,
        view_height=10,
    )
    assert jnp.linalg.norm(frame.flatten() - TEST_FRAME.flatten(), ord=jnp.inf) < 0.05


def test_generate_colormap() -> None:
    """Test the dummy colormap generation function."""
    w, h = 10, 10
    cmap = generate_colormap(jax.random.PRNGKey(42), w, h)
    assert cmap.shape == (w, h, 3)
    res = jnp.logical_and(cmap >= 0.0, cmap <= 1.0)
    assert jnp.all(res, axis=None)


def test_render_frame_with_objs() -> None:
    """Test if the renderer can correctly render one frame with props."""
    key = jax.random.PRNGKey(42)
    frame = render_frame_with_objects(
        jnp.array([0, 5.0, -10]),
        jnp.array([0, -0.5, 1.0]),
        TEST_TILEMAP_BUMP,
        generate_colormap(key, 10, 10),
        view_width=10,
        view_height=10,
    )
    assert (
        jnp.linalg.norm(frame.flatten() - TEST_FRAME_WITH_PROPS.flatten(), ord=jnp.inf)
        < 0.05
    )
